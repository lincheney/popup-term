; example configuration file for termineur
;
; comments can start with ;
# or they can also start with #
;
; each line should be in the format:
; key = value
; whitespace around the `=` doesn't matter
;
; you can do multiline values with triple quotes:
; key = """
; line1
; line2
; """
;
; for bool values, `n`, `no`, `false`, `off`, `0`, `` (case insensitive)
; are considered false, everything else is true.
;

; COLOUR OPTIONS

; colour values can be anything supported by gdk_rgba_parse()
; https://developer.gnome.org/gdk3/stable/gdk3-RGBA-Colors.html#gdk-rgba-parse
; default background colour
background = #111111
; default foreground colour
foreground = white
; colour 1 (usually red) ; you can set col0-col255
col1 = #f22
col2 = #2f2
col3 = #22f

; UI OPTIONS

; css to style gtk
css = termineur { color: red; }
; show-scrollbar = overlay|never|no|always|* (anything else is always)
; overlay the scrollbar on the terminal
; this is different from `always`, where it is shown on the side without overlapping
show-scrollbar = overlay
; show the tab bar (smart|n|no|0|false|off|yes|*)
; when `smart`, only show tab bar when > 1 tab
show-tabs = smart
; show a button on the tab bar to make new tabs
show-new-tab-button = yes
; show the tab bar on the (left|right|top|bottom)
tab-pos = top
; tab titles should fill allocated space
tab-fill = yes
; tab titles should expand as wide as possible
tab-expand = yes
; disable GtkNotebook popup
tab-enable-popup = no
; make tabbar scrollable if it can't fit
tab-scrollable = yes
; open new terminals in a (new_window|new_tab) by default
default-open-action = new_window
; duration in ms of the message bar sliding animation, set to 0 to disable
message-bar-animation-duration = 100
; show a confirmation dialog before closing a window with alt+f4 (or similar)
window-close-confirm = yes
; show a confirmation dialog before closing a tab (smart|n|no|0|false|off|yes|*)
;   when `smart`, dialog is only shown if there is a running job in the shell
tab-close-confirm = smart
; name of icon to on window
window-icon = utilities-terminal
; format string for the window title
;   %N tab number
;   %n foreground process name
;   %t window title (e.g. printf '\033]2;hello\007' )
;   %d basename of cwd of foreground process
;   %u username of foreground process
window-title-format = %t
; update the ui every 5s
; this affects e.g. how often the window titles get updated
ui-refresh-interval = 5000
; how long in ms after last ouput until terminal is considered `inactive`
inactivity-duration = 2000

; options for formatting tab titles
; the tab-label-* options are mutually exclusive with tab-title-ui
; if neither are specified, a default label with format `%t` will be used

; use a generic label
; format string is same as window-title-format
; and you can use pango markup here
tab-label-format = <span background="#ff0000">%N</span> %t
; align center (left|right|center)
tab-label-alignment = center
; ellipsize the text if it is too long to fit (start|middle|end)
tab-label-ellipsize-mode = end

; OR
; specify the tab title widgets with a GtkBuilder UI definition
;
; in order to tell which properties need format-string processing
; the <signal> nodes have been hijacked
; make a signal node like:
; <signal name="event" handler="format:property_name" />
; or if you need XML escaping (e.g. for pango markup):
; <signal name="event" handler="format:escaped:property_name" />
tab-title-ui = """
<interface>
    <object class="GtkLabel">
        <property name="label">%t</property>
        <signal name="event" handler="format:escaped:label" />
    </object>
</interface>
"""

; TERMINAL OPTIONS
font = monospace 12
encoding = UTF-8
; scale the font 1.3x the base size
font-scale = 1.3
; enable OSC 8 hyperlink support
allow-hyperlink = yes
; hide mouse pointer while typing
pointer-autohide = yes
; rewrap lines when terminal is resized
rewrap-on-resize = yes
; scroll to terminal cursor when typing
scroll-on-keystroke = yes
; scroll to terminal cursor on output
scroll-on-output = yes
; default size of scrollback history for *new* terminals
; -1 sets to unlimited
default-scrollback-lines = 1000
; scrollback lines for *this/current* terminal
; use this to change the amount of scrollback on the fly
scrollback-lines = -1
; additional characters considered part of a word when e.g. double clicking
word-char-exceptions = ./@$#[]
audible-bell = no
; default program to run in new terminals
default-args = bash
; wheter to blink the terminal cursor (system|n|no|false|off|yes|*)
cursor-blink-mode = no
; shwape of terminal cursor (block, ibeam, underline
cursor-shape = underline

; SEARCH OPTIONS

; enable/disable searching with regex patterns
search-use-regex = no
search-wrap-around = yes
; duration in ms of the search bar sliding animation, set to 0 to disable
search-bar-animation-duration = 0
; search pattern for *this/current* terminal
search-pattern = ERROR
; case sensitivity of search pattern (smart|n|no|false|off|0|yes|*)
;   when smart, pattern is case insensitive except if pattern has uppercase characters
search-case-sensitive = smart

; EVENTS/ACTIONS
; all events start with on-
; all key events start with on-key-
; you can specify multiple actions per event
; or clear previous actions by not providing an action:
;   on-bell =

; starting the application
on-start = split_left
; whenever config is (re)loaded
on-config = run: sh -c 'echo config loaded >&2'
; test this out with `echo -e '\a'`
on-bell = run:notify-send BELL
; when terminal is focused
on-focus =
; when mouse is hovered over a hyperlink
on-hyperlink-hover =
; when a hyperlink is clicked
on-hyperlink-click = run: sh -c 'firefox "$TERMINEUR_HYPERLINK"'
; keybinding
on-key-<control><shift>t = new_tab

; ACTIONS
;
; actions in config files never run
; so you should bind them to an event
;
; actions look like:
;   action_name
; OR:
;   action_name: arguments

; paste clipboard text
on-key-<control><shift>v = paste_text
; paste the given text
; you can use this to send text to the terminal
; while respecting bracketed paste
on-key-<control><shift>v = paste_text: pasted text
; copy selected text to clipboard
on-key-<control><shift>c = copy_text
; change font scale to specifc value
on-bell = change_font_scale: 1.2
; increase/decrease font scale by amount
on-key-<control>equal = change_font_scale: +0.2
on-key-<control>minus = change_font_scale: -0.2
; reset terminal and clear scrollback
on-key-<control><shift>p = reset_terminal
; scrolling
on-key-<shift>Up = scroll_up
on-key-<shift>Down = scroll_down
on-key-<shift>Page_Up = scroll_page_up
on-key-<shift>Page_Down = scroll_page_down
on-key-<shift>Home = scroll_top
on-key-<shift>End = scroll_bottom
; selections
on-key-<control><shift>a = select_all
on-key-<alt><shift>a = unselect_all
; feed data to terminal input
on-key-<control><shift>i = feed_data: echo hello\necho here\\'s some text\n
; feed data to terminal output
on-key-<control><shift>u = feed_term: \x1b[1mghost in the machine\x1b[0m
; new tab/window/splits with default-args
on-key-<control><shift>t = new_tab
on-key-<control><shift>n = new_window
on-key-<control><shift>l = split_right
on-key-<control><shift>h = split_left
on-key-<control><shift>k = split_above
on-key-<control><shift>j = split_below
; new tab/window/splits with args
on-key-<control><shift>t = new_tab: vim
; new tab/window/splits in a specific directory
on-key-<control><shift>t = new_tab: cwd=/tmp vim
; make split with 20 lines/columns/px/% of total
on-key-<control><shift>j = split_below: size=20 bash
on-key-<control><shift>j = split_below: size=20px bash
on-key-<control><shift>j = split_below: size=20% bash
; go to next/previous tab
on-key-<shift>Left = prev_tab
on-key-<shift>Right = next_tab
; move this tab left/right
on-key-<control><shift>Left = move_tab_prev
on-key-<control><shift>Right = move_tab_next
; move splits around
on-key-<alt><shift>l = move_split_right
on-key-<alt><shift>h = move_split_left
on-key-<alt><shift>k = move_split_above
on-key-<alt><shift>j = move_split_below
; switch focus to another split
on-key-<control><alt>l = focus_split_right
on-key-<control><alt>h = focus_split_left
on-key-<control><alt>k = focus_split_above
on-key-<control><alt>j = focus_split_below
; resize splits
; change move edge until 10 columns wide
on-key-<control><alt><shift>l = resize_split_right:10
; move left edge 10 columns left
on-key-<control><alt><shift>h = resize_split_left:+10
; move top edge 10 rows down
on-key-<control><alt><shift>k = resize_split_above:-10
; move bottom edge 5px down
on-key-<control><alt><shift>j = resize_split_below:+5px

on-key-<control><shift>w = close_tab
; move this tab to a new window
on-key-<control><shift>Return = detach_tab
; cut and paste a tab
; you can use this to move tabs across windows without needing to use the mouse
on-key-<control><shift>Up = cut_tab
on-key-<control><shift>Down = paste_tab
; cut and paste a terminal
on-key-<alt><shift>Up = cut_terminal
; paste the terminal using default-open-action
on-key-<alt><shift>Down = paste_terminal
; paste the terminal using a specific action
on-key-<alt><shift>Down = paste_terminal: split_left
; jump to a specific number tab, starting from 0
; -1 is the last tab
on-key-<alt>1 = switch_to_tab: 0
on-key-<alt>0 = switch_to_tab: -1
; open the tab popup menu
on-key-F12 = tab_popup_menu
; reset config and reload the config file
on-key-<control><shift>r = reload_config
; reset config and load a specific config file
on-key-<control><shift>r = reload_config: /path/to/file.ini
; load a specific config file *without* resetting
on-key-<control><shift>r = load_file: /path/to/file.ini
; add/remove css class from the tab title and terminal
on-bell = add_css_class: bell
on-focus = remove_css_class: bell
; show/hide the message bar
on-key-<control><shift>parenleft = show_message_bar
on-key-<control><shift>parenleft = hide_message_bar
; show the message bar with pango markup
on-key-<control><shift>parenright = show_message_bar: <span background="#ff0000">WARNING</span>
; select lines
; starting from 10th column in 20th row
; up until 30th column in 40th row
on-key-<control><shift>exclam = select_range: 10,20,30,40
; negative values are relative to the end
; now select until last column in last row
on-key-<control><shift>at = select_range: 10,20,-1,-1
; select in a rectangular block
on-key-<control><shift>numbersign = select_block: 10,20,-1,-1
; search up/down for text
on-key-<control><shift>n = search_up: text
on-key-<control><shift>m = search_down: text
; search without moving up/down if possible ie if the selected text already matches
on-key-<control><shift>question = search: text
; clear the search pattern
on-key-<alt><shift>question = search
; show and focus the search bar
on-key-<control><shift>f = focus_searchbar
; hide the search bar
on-key-<alt><shift>f = hide_searchbar

; run some commands with run, pipe_screen, pipe_screen_ansi, pipe_all, pipe_all_ansi
; the following environment variables get set:
;   TERM
;   COLUMNS
;   LINES
;   TERMINEUR_ID=app id, also unix socket name
;   TERMINEUR_PATH=/path/to/termineur
;   TERMINEUR_PID=pid of terminal process
;   TERMINEUR_FGPID=pid of foreground process
;   TERMINEUR_FGNAME=foreground process command name (e.g. bash)
;   TERMINEUR_CURSORX=column of terminal cursor
;   TERMINEUR_CURSORY=row of terminal cursor
;   TERMINEUR_CONTOL_FLOW=is control flow supported (xon/xoff)
;   TERMINEUR_HYPERLINK=hyperlink under mouse, if any
;   TERMINEUR_XWINDOWID=id of x11 window
;   TERMINEUR_ROWS=total row count
; anything on stdout is fed back to the terminal as input
;
; round-about way to make a new tab
on-key-<control><shift>t = run: sh -c '"$TERMINEUR_PATH" -c new_tab'
; round-about way to do feed_data
on-key-<control><shift>i = run: echo -e "hello\necho here's some text\n"
; dump visible screen text to file
on-key-<control><shift>dollar = pipe_screen: sh -c 'cat > /tmp/visible_output'
; dump all text to file
on-key-<control><shift>s = pipe_all: sh -c 'cat > /tmp/output'
; get terminal output, but with ansi colour codes etc
on-key-<control><shift>o = pipe_screen_ansi: sh -c 'cat > /tmp/ansi_output'
on-key-<control><shift>o = pipe_all_ansi: sh -c 'cat > /tmp/ansi_output'
